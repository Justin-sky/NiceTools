// automatically generated by the FlatBuffers compiler, do not modify

/**
 * @constructor
 */
export namespace fb{
export class skillconfigTB {
  bb: flatbuffers.ByteBuffer|null = null;

  bb_pos:number = 0;
/**
 * @param number i
 * @param flatbuffers.ByteBuffer bb
 * @returns skillconfigTB
 */
__init(i:number, bb:flatbuffers.ByteBuffer):skillconfigTB {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param flatbuffers.ByteBuffer bb
 * @param skillconfigTB= obj
 * @returns skillconfigTB
 */
static getRootAsskillconfigTB(bb:flatbuffers.ByteBuffer, obj?:skillconfigTB):skillconfigTB {
  return (obj || new skillconfigTB()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param flatbuffers.ByteBuffer bb
 * @param skillconfigTB= obj
 * @returns skillconfigTB
 */
static getSizePrefixedRootAsskillconfigTB(bb:flatbuffers.ByteBuffer, obj?:skillconfigTB):skillconfigTB {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new skillconfigTB()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param number index
 * @param fb.skillconfigTR= obj
 * @returns fb.skillconfigTR
 */
skillconfigTRS(index: number, obj?:fb.skillconfigTR):fb.skillconfigTR|null {
  var offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new fb.skillconfigTR()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
};

/**
 * @returns number
 */
skillconfigTRSLength():number {
  var offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * @param flatbuffers.Builder builder
 */
static startskillconfigTB(builder:flatbuffers.Builder) {
  builder.startObject(1);
};

/**
 * @param flatbuffers.Builder builder
 * @param flatbuffers.Offset skillconfigTRSOffset
 */
static addSkillconfigTRS(builder:flatbuffers.Builder, skillconfigTRSOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, skillconfigTRSOffset, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param Array.<flatbuffers.Offset> data
 * @returns flatbuffers.Offset
 */
static createSkillconfigTRSVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (var i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]);
  }
  return builder.endVector();
};

/**
 * @param flatbuffers.Builder builder
 * @param number numElems
 */
static startSkillconfigTRSVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
};

/**
 * @param flatbuffers.Builder builder
 * @returns flatbuffers.Offset
 */
static endskillconfigTB(builder:flatbuffers.Builder):flatbuffers.Offset {
  var offset = builder.endObject();
  return offset;
};

/**
 * @param flatbuffers.Builder builder
 * @param flatbuffers.Offset offset
 */
static finishskillconfigTBBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset);
};

/**
 * @param flatbuffers.Builder builder
 * @param flatbuffers.Offset offset
 */
static finishSizePrefixedskillconfigTBBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, undefined, true);
};

static createskillconfigTB(builder:flatbuffers.Builder, skillconfigTRSOffset:flatbuffers.Offset):flatbuffers.Offset {
  skillconfigTB.startskillconfigTB(builder);
  skillconfigTB.addSkillconfigTRS(builder, skillconfigTRSOffset);
  return skillconfigTB.endskillconfigTB(builder);
}
}
}
/**
 * @constructor
 */
export namespace fb{
export class skillconfigTR {
  bb: flatbuffers.ByteBuffer|null = null;

  bb_pos:number = 0;
/**
 * @param number i
 * @param flatbuffers.ByteBuffer bb
 * @returns skillconfigTR
 */
__init(i:number, bb:flatbuffers.ByteBuffer):skillconfigTR {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param flatbuffers.ByteBuffer bb
 * @param skillconfigTR= obj
 * @returns skillconfigTR
 */
static getRootAsskillconfigTR(bb:flatbuffers.ByteBuffer, obj?:skillconfigTR):skillconfigTR {
  return (obj || new skillconfigTR()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param flatbuffers.ByteBuffer bb
 * @param skillconfigTR= obj
 * @returns skillconfigTR
 */
static getSizePrefixedRootAsskillconfigTR(bb:flatbuffers.ByteBuffer, obj?:skillconfigTR):skillconfigTR {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new skillconfigTR()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @returns number
 */
Id():number {
  var offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
};

/**
 * @param flatbuffers.Encoding= optionalEncoding
 * @returns string|Uint8Array|null
 */
Name():string|null
Name(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
Name(optionalEncoding?:any):string|Uint8Array|null {
  var offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
};

/**
 * @param flatbuffers.Encoding= optionalEncoding
 * @returns string|Uint8Array|null
 */
Description():string|null
Description(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
Description(optionalEncoding?:any):string|Uint8Array|null {
  var offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
};

/**
 * @returns number
 */
Cooltime():number {
  var offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
};

/**
 * @returns number
 */
Costsp():number {
  var offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
};

/**
 * @returns number
 */
Attackdistance():number {
  var offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
};

/**
 * @returns number
 */
Attackangle():number {
  var offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
};

/**
 * @param number index
 * @param flatbuffers.Encoding= optionalEncoding
 * @returns string|Uint8Array
 */
Attacktargettags(index: number):string
Attacktargettags(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
Attacktargettags(index: number,optionalEncoding?:any):string|Uint8Array|null {
  var offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
};

/**
 * @returns number
 */
AttacktargettagsLength():number {
  var offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * @param number index
 * @param flatbuffers.Encoding= optionalEncoding
 * @returns string|Uint8Array
 */
Impacttype(index: number):string
Impacttype(index: number,optionalEncoding:flatbuffers.Encoding):string|Uint8Array
Impacttype(index: number,optionalEncoding?:any):string|Uint8Array|null {
  var offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.__string(this.bb!.__vector(this.bb_pos + offset) + index * 4, optionalEncoding) : null;
};

/**
 * @returns number
 */
ImpacttypeLength():number {
  var offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * @returns number
 */
Nextbattlerid():number {
  var offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
};

/**
 * @returns number
 */
Atkratio():number {
  var offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
};

/**
 * @returns number
 */
Durationtime():number {
  var offset = this.bb!.__offset(this.bb_pos, 26);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
};

/**
 * @returns number
 */
Atkinterval():number {
  var offset = this.bb!.__offset(this.bb_pos, 28);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
};

/**
 * @param flatbuffers.Encoding= optionalEncoding
 * @returns string|Uint8Array|null
 */
Skillprefab():string|null
Skillprefab(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
Skillprefab(optionalEncoding?:any):string|Uint8Array|null {
  var offset = this.bb!.__offset(this.bb_pos, 30);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
};

/**
 * @param flatbuffers.Encoding= optionalEncoding
 * @returns string|Uint8Array|null
 */
Animationname():string|null
Animationname(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
Animationname(optionalEncoding?:any):string|Uint8Array|null {
  var offset = this.bb!.__offset(this.bb_pos, 32);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
};

/**
 * @param flatbuffers.Encoding= optionalEncoding
 * @returns string|Uint8Array|null
 */
Hitfxprefab():string|null
Hitfxprefab(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
Hitfxprefab(optionalEncoding?:any):string|Uint8Array|null {
  var offset = this.bb!.__offset(this.bb_pos, 34);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
};

/**
 * @returns number
 */
Level():number {
  var offset = this.bb!.__offset(this.bb_pos, 36);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
};

/**
 * @returns number
 */
Attacktype():number {
  var offset = this.bb!.__offset(this.bb_pos, 38);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
};

/**
 * @returns number
 */
Selectortype():number {
  var offset = this.bb!.__offset(this.bb_pos, 40);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
};

/**
 * @param flatbuffers.Builder builder
 */
static startskillconfigTR(builder:flatbuffers.Builder) {
  builder.startObject(19);
};

/**
 * @param flatbuffers.Builder builder
 * @param number Id
 */
static add_id(builder:flatbuffers.Builder, Id:number) {
  builder.addFieldInt32(0, Id, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param flatbuffers.Offset NameOffset
 */
static add_name(builder:flatbuffers.Builder, NameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, NameOffset, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param flatbuffers.Offset DescriptionOffset
 */
static add_description(builder:flatbuffers.Builder, DescriptionOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, DescriptionOffset, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param number Cooltime
 */
static add_cooltime(builder:flatbuffers.Builder, Cooltime:number) {
  builder.addFieldInt32(3, Cooltime, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param number Costsp
 */
static add_costsp(builder:flatbuffers.Builder, Costsp:number) {
  builder.addFieldInt32(4, Costsp, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param number Attackdistance
 */
static add_attackdistance(builder:flatbuffers.Builder, Attackdistance:number) {
  builder.addFieldFloat32(5, Attackdistance, 0.0);
};

/**
 * @param flatbuffers.Builder builder
 * @param number Attackangle
 */
static add_attackangle(builder:flatbuffers.Builder, Attackangle:number) {
  builder.addFieldFloat32(6, Attackangle, 0.0);
};

/**
 * @param flatbuffers.Builder builder
 * @param flatbuffers.Offset AttacktargettagsOffset
 */
static add_attacktargettags(builder:flatbuffers.Builder, AttacktargettagsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(7, AttacktargettagsOffset, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param Array.<flatbuffers.Offset> data
 * @returns flatbuffers.Offset
 */
static create_attacktargettagsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (var i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]);
  }
  return builder.endVector();
};

/**
 * @param flatbuffers.Builder builder
 * @param number numElems
 */
static start_attacktargettagsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
};

/**
 * @param flatbuffers.Builder builder
 * @param flatbuffers.Offset ImpacttypeOffset
 */
static add_impacttype(builder:flatbuffers.Builder, ImpacttypeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(8, ImpacttypeOffset, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param Array.<flatbuffers.Offset> data
 * @returns flatbuffers.Offset
 */
static create_impacttypeVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (var i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]);
  }
  return builder.endVector();
};

/**
 * @param flatbuffers.Builder builder
 * @param number numElems
 */
static start_impacttypeVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
};

/**
 * @param flatbuffers.Builder builder
 * @param number Nextbattlerid
 */
static add_nextbattlerid(builder:flatbuffers.Builder, Nextbattlerid:number) {
  builder.addFieldInt32(9, Nextbattlerid, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param number Atkratio
 */
static add_atkratio(builder:flatbuffers.Builder, Atkratio:number) {
  builder.addFieldFloat32(10, Atkratio, 0.0);
};

/**
 * @param flatbuffers.Builder builder
 * @param number Durationtime
 */
static add_durationtime(builder:flatbuffers.Builder, Durationtime:number) {
  builder.addFieldFloat32(11, Durationtime, 0.0);
};

/**
 * @param flatbuffers.Builder builder
 * @param number Atkinterval
 */
static add_atkinterval(builder:flatbuffers.Builder, Atkinterval:number) {
  builder.addFieldFloat32(12, Atkinterval, 0.0);
};

/**
 * @param flatbuffers.Builder builder
 * @param flatbuffers.Offset SkillprefabOffset
 */
static add_skillprefab(builder:flatbuffers.Builder, SkillprefabOffset:flatbuffers.Offset) {
  builder.addFieldOffset(13, SkillprefabOffset, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param flatbuffers.Offset AnimationnameOffset
 */
static add_animationname(builder:flatbuffers.Builder, AnimationnameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(14, AnimationnameOffset, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param flatbuffers.Offset HitfxprefabOffset
 */
static add_hitfxprefab(builder:flatbuffers.Builder, HitfxprefabOffset:flatbuffers.Offset) {
  builder.addFieldOffset(15, HitfxprefabOffset, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param number Level
 */
static add_level(builder:flatbuffers.Builder, Level:number) {
  builder.addFieldInt32(16, Level, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param number Attacktype
 */
static add_attacktype(builder:flatbuffers.Builder, Attacktype:number) {
  builder.addFieldInt32(17, Attacktype, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @param number Selectortype
 */
static add_selectortype(builder:flatbuffers.Builder, Selectortype:number) {
  builder.addFieldInt32(18, Selectortype, 0);
};

/**
 * @param flatbuffers.Builder builder
 * @returns flatbuffers.Offset
 */
static endskillconfigTR(builder:flatbuffers.Builder):flatbuffers.Offset {
  var offset = builder.endObject();
  return offset;
};

static createskillconfigTR(builder:flatbuffers.Builder, Id:number, NameOffset:flatbuffers.Offset, DescriptionOffset:flatbuffers.Offset, Cooltime:number, Costsp:number, Attackdistance:number, Attackangle:number, AttacktargettagsOffset:flatbuffers.Offset, ImpacttypeOffset:flatbuffers.Offset, Nextbattlerid:number, Atkratio:number, Durationtime:number, Atkinterval:number, SkillprefabOffset:flatbuffers.Offset, AnimationnameOffset:flatbuffers.Offset, HitfxprefabOffset:flatbuffers.Offset, Level:number, Attacktype:number, Selectortype:number):flatbuffers.Offset {
  skillconfigTR.startskillconfigTR(builder);
  skillconfigTR.add_id(builder, Id);
  skillconfigTR.add_name(builder, NameOffset);
  skillconfigTR.add_description(builder, DescriptionOffset);
  skillconfigTR.add_cooltime(builder, Cooltime);
  skillconfigTR.add_costsp(builder, Costsp);
  skillconfigTR.add_attackdistance(builder, Attackdistance);
  skillconfigTR.add_attackangle(builder, Attackangle);
  skillconfigTR.add_attacktargettags(builder, AttacktargettagsOffset);
  skillconfigTR.add_impacttype(builder, ImpacttypeOffset);
  skillconfigTR.add_nextbattlerid(builder, Nextbattlerid);
  skillconfigTR.add_atkratio(builder, Atkratio);
  skillconfigTR.add_durationtime(builder, Durationtime);
  skillconfigTR.add_atkinterval(builder, Atkinterval);
  skillconfigTR.add_skillprefab(builder, SkillprefabOffset);
  skillconfigTR.add_animationname(builder, AnimationnameOffset);
  skillconfigTR.add_hitfxprefab(builder, HitfxprefabOffset);
  skillconfigTR.add_level(builder, Level);
  skillconfigTR.add_attacktype(builder, Attacktype);
  skillconfigTR.add_selectortype(builder, Selectortype);
  return skillconfigTR.endskillconfigTR(builder);
}
}
}
