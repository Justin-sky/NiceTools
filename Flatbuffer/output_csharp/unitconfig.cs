// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace fb
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct unitconfigTB : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static unitconfigTB GetRootAsunitconfigTB(ByteBuffer _bb) { return GetRootAsunitconfigTB(_bb, new unitconfigTB()); }
  public static unitconfigTB GetRootAsunitconfigTB(ByteBuffer _bb, unitconfigTB obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public unitconfigTB __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public fb.unitconfigTR? UnitconfigTRS(int j) { int o = __p.__offset(4); return o != 0 ? (fb.unitconfigTR?)(new fb.unitconfigTR()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int UnitconfigTRSLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }
  public fb.unitconfigTR? UnitconfigTRSByKey(int key) { int o = __p.__offset(4); return o != 0 ? fb.unitconfigTR.__lookup_by_key(__p.__vector(o), key, __p.bb) : null; }

  public static Offset<fb.unitconfigTB> CreateunitconfigTB(FlatBufferBuilder builder,
      VectorOffset unitconfigTRSOffset = default(VectorOffset)) {
    builder.StartTable(1);
    unitconfigTB.AddUnitconfigTRS(builder, unitconfigTRSOffset);
    return unitconfigTB.EndunitconfigTB(builder);
  }

  public static void StartunitconfigTB(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddUnitconfigTRS(FlatBufferBuilder builder, VectorOffset unitconfigTRSOffset) { builder.AddOffset(0, unitconfigTRSOffset.Value, 0); }
  public static VectorOffset CreateUnitconfigTRSVector(FlatBufferBuilder builder, Offset<fb.unitconfigTR>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateUnitconfigTRSVectorBlock(FlatBufferBuilder builder, Offset<fb.unitconfigTR>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartUnitconfigTRSVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<fb.unitconfigTB> EndunitconfigTB(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<fb.unitconfigTB>(o);
  }
  public static void FinishunitconfigTBBuffer(FlatBufferBuilder builder, Offset<fb.unitconfigTB> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedunitconfigTBBuffer(FlatBufferBuilder builder, Offset<fb.unitconfigTB> offset) { builder.FinishSizePrefixed(offset.Value); }
};

public struct unitconfigTR : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static unitconfigTR GetRootAsunitconfigTR(ByteBuffer _bb) { return GetRootAsunitconfigTR(_bb, new unitconfigTR()); }
  public static unitconfigTR GetRootAsunitconfigTR(ByteBuffer _bb, unitconfigTR obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public unitconfigTR __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int _id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public string _name { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> Get_nameBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? Get_nameBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] Get_nameArray() { return __p.__vector_as_array<byte>(6); }
  public string _desc { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> Get_descBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? Get_descBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] Get_descArray() { return __p.__vector_as_array<byte>(8); }
  public int _position { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int _height { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int _weight { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<fb.unitconfigTR> CreateunitconfigTR(FlatBufferBuilder builder,
      int _id = 0,
      StringOffset _nameOffset = default(StringOffset),
      StringOffset _descOffset = default(StringOffset),
      int _position = 0,
      int _height = 0,
      int _weight = 0) {
    builder.StartTable(6);
    unitconfigTR.Add_weight(builder, _weight);
    unitconfigTR.Add_height(builder, _height);
    unitconfigTR.Add_position(builder, _position);
    unitconfigTR.Add_desc(builder, _descOffset);
    unitconfigTR.Add_name(builder, _nameOffset);
    unitconfigTR.Add_id(builder, _id);
    return unitconfigTR.EndunitconfigTR(builder);
  }

  public static void StartunitconfigTR(FlatBufferBuilder builder) { builder.StartTable(6); }
  public static void Add_id(FlatBufferBuilder builder, int Id) { builder.AddInt(0, Id, 0); }
  public static void Add_name(FlatBufferBuilder builder, StringOffset NameOffset) { builder.AddOffset(1, NameOffset.Value, 0); }
  public static void Add_desc(FlatBufferBuilder builder, StringOffset DescOffset) { builder.AddOffset(2, DescOffset.Value, 0); }
  public static void Add_position(FlatBufferBuilder builder, int Position) { builder.AddInt(3, Position, 0); }
  public static void Add_height(FlatBufferBuilder builder, int Height) { builder.AddInt(4, Height, 0); }
  public static void Add_weight(FlatBufferBuilder builder, int Weight) { builder.AddInt(5, Weight, 0); }
  public static Offset<fb.unitconfigTR> EndunitconfigTR(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<fb.unitconfigTR>(o);
  }

  public static VectorOffset CreateSortedVectorOfunitconfigTR(FlatBufferBuilder builder, Offset<unitconfigTR>[] offsets) {
    Array.Sort(offsets, (Offset<unitconfigTR> o1, Offset<unitconfigTR> o2) => builder.DataBuffer.GetInt(Table.__offset(4, o1.Value, builder.DataBuffer)).CompareTo(builder.DataBuffer.GetInt(Table.__offset(4, o2.Value, builder.DataBuffer))));
    return builder.CreateVectorOfTables(offsets);
  }

  public static unitconfigTR? __lookup_by_key(int vectorLocation, int key, ByteBuffer bb) {
    int span = bb.GetInt(vectorLocation - 4);
    int start = 0;
    while (span != 0) {
      int middle = span / 2;
      int tableOffset = Table.__indirect(vectorLocation + 4 * (start + middle), bb);
      int comp = bb.GetInt(Table.__offset(4, bb.Length - tableOffset, bb)).CompareTo(key);
      if (comp > 0) {
        span = middle;
      } else if (comp < 0) {
        middle++;
        start += middle;
        span -= middle;
      } else {
        return new unitconfigTR().__assign(tableOffset, bb);
      }
    }
    return null;
  }
};


}
